# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HistologyImageViewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import matplotlib.pyplot as plt
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QRect, QSize, pyqtSignal, QPointF
from PyQt5.QtGui import QPixmap, QPainter
from PyQt5.QtWidgets import QWidget, QApplication, QFileDialog, QGraphicsScene, QGraphicsView, QRubberBand, QMessageBox
from skimage import io

from gui.utils import pixmap2np, set_bg_colour_histo, np2pixmap


class HistologyImageViewer(QWidget):

    patch_selected_signal = pyqtSignal(object, object, object)

    def __init__(self, *args, **kwargs):
        super(HistologyImageViewer, self).__init__()
        self.setObjectName("Form")
        self.resize(1412, 846)
        self.setWindowTitle("Histology Image Viewer")

        overallLayout = QtWidgets.QGridLayout(self)
        overallLayout.setObjectName("overallLayout")
        widget_3 = QtWidgets.QWidget(self)
        widget_3.setObjectName("widget_3")
        verticalLayout = QtWidgets.QVBoxLayout(widget_3)
        verticalLayout.setObjectName("verticalLayout")
        widget = QtWidgets.QWidget(widget_3)
        widget.setObjectName("widget")

        gridLayout = QtWidgets.QGridLayout(widget)
        gridLayout.setObjectName("gridLayout")

        loadWSIButton = QtWidgets.QPushButton(widget)
        loadWSIButton.setObjectName("loadWSIButton")
        loadWSIButton.setText("Load Histology Image")
        loadWSIButton.clicked.connect(self.toggle_loadWSIButton)
        gridLayout.addWidget(loadWSIButton, 0, 1, 1, 1)

        selectSquareAreaButton = QtWidgets.QPushButton(widget)
        selectSquareAreaButton.setObjectName("selectSquareAreaButton")
        selectSquareAreaButton.setText("Select Square Patch")
        selectSquareAreaButton.clicked.connect(self.toggle_selectSquareAreaButton)
        gridLayout.addWidget(selectSquareAreaButton, 0, 2, 1, 1)

        deleteSelectionButton = QtWidgets.QPushButton(widget)
        deleteSelectionButton.setObjectName("deleteSelectionButton")
        deleteSelectionButton.setText("Delete Selection")
        deleteSelectionButton.clicked.connect(self.toggle_deleteSelectionButton)
        gridLayout.addWidget(deleteSelectionButton, 0, 3, 1, 1)

        self.selectedHistoPatchBgGroupbox = QtWidgets.QCheckBox(widget)
        self.selectedHistoPatchBgGroupbox.setObjectName("selectedHistoPatchBgGroupbox")
        self.selectedHistoPatchBgGroupbox.setText("Change Selected Patch background to black")
        self.selectedHistoPatchBgGroupbox.setChecked(True)
        self.selectedHistoPatchBgGroupbox.stateChanged.connect(self.stateChanged_selectedHistoPatchBgGroupbox)
        gridLayout.addWidget(self.selectedHistoPatchBgGroupbox, 0, 4, 1, 1)

        self.clearAllButton = QtWidgets.QPushButton(widget)
        self.clearAllButton.setObjectName("clearAllButton")
        self.clearAllButton.setText("Clear All")
        self.clearAllButton.clicked.connect(self.toggle_clearAllButton)
        gridLayout.addWidget(self.clearAllButton, 0, 5, 1, 1)
        verticalLayout.addWidget(widget)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        gridLayout.addItem(spacerItem, 0, 6, 1, 1)

        groupBox_3 = QtWidgets.QGroupBox(widget)
        groupBox_3.setObjectName("groupBox_3")
        groupBox_3.setTitle("Whole Slide Image")
        overallLayout_2 = QtWidgets.QHBoxLayout(groupBox_3)
        overallLayout_2.setObjectName("overallLayout_2")
        self.histologyImageView = SimpleGraphicsView(QGraphicsScene(), groupBox_3)
        self.histologyImageView.set_maingui(self)
        self.histologyImageView.setObjectName("histologyImageView")
        self.histologyImageView.setMinimumSize(QtCore.QSize(800, 600))
        self.histologyImageView.setStyleSheet("background-color: rgb(0, 0, 0);")
        overallLayout_2.addWidget(self.histologyImageView)
        gridLayout.addWidget(groupBox_3, 2, 1, 1, 7)

        line = QtWidgets.QFrame(widget)
        line.setFrameShape(QtWidgets.QFrame.HLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)
        line.setObjectName("line")
        gridLayout.addWidget(line, 1, 1, 1, 7)

        verticalLayout.addWidget(widget)
        overallLayout.addWidget(widget_3,  0, 0, 1, 1)
        widget_2 = QtWidgets.QWidget(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(widget_2.sizePolicy().hasHeightForWidth())
        widget_2.setSizePolicy(sizePolicy)
        widget_2.setObjectName("widget_2")
        verticalLayout_2 = QtWidgets.QVBoxLayout(widget_2)
        verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem1 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        verticalLayout_2.addItem(spacerItem1)

        showHistoPatchGroupBox = QtWidgets.QGroupBox(widget_2)
        showHistoPatchGroupBox.setObjectName("showHistoPatchGroupBox")
        showHistoPatchGroupBox.setTitle("Selected Histology Patch")
        gridLayout_3 = QtWidgets.QGridLayout(showHistoPatchGroupBox)
        gridLayout_3.setObjectName("gridLayout_3")

        self.selectedHistologyPatchView = QtWidgets.QLabel(showHistoPatchGroupBox)
        self.selectedHistologyPatchView.setMinimumSize(QtCore.QSize(300, 300))
        self.selectedHistologyPatchView.setText("")
        self.selectedHistologyPatchView.setObjectName("selectedHistologyPatchView")
        self.selectedHistologyPatchView.setStyleSheet("background-color: rgb(0, 0, 0);")
        gridLayout_3.addWidget(self.selectedHistologyPatchView, 0, 0, 1, 1)
        verticalLayout_2.addWidget(showHistoPatchGroupBox)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        verticalLayout_2.addItem(spacerItem2)

        groupBox_2 = QtWidgets.QGroupBox(widget_2)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("Fake Histology Image from FLIM")
        gridLayout_2 = QtWidgets.QGridLayout(groupBox_2)
        gridLayout_2.setObjectName("gridLayout_2")
        self.fakeHistologyImageView = QtWidgets.QLabel(groupBox_2)
        self.fakeHistologyImageView.setMinimumSize(QtCore.QSize(300, 300))
        self.fakeHistologyImageView.setText("")
        self.fakeHistologyImageView.setObjectName("fakeHistologyImageView")
        self.fakeHistologyImageView.setStyleSheet("background-color: rgb(0, 0, 0);")
        gridLayout_2.addWidget(self.fakeHistologyImageView, 0, 0, 1, 1)

        verticalLayout_2.addWidget(groupBox_2)
        spacerItem3 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        verticalLayout_2.addItem(spacerItem3)
        overallLayout.addWidget(widget_2, 0, 1, 1, 1)

        self.statusLabel = QtWidgets.QLabel(self)
        self.statusLabel.setObjectName("statusLabel")
        self.statusLabel.setText("Status: ")
        overallLayout.addWidget(self.statusLabel, 1, 0, 1, 2)

        self.setLayout(overallLayout)

        self.histo_view_item = None

        self.original_histo_image = None
        self.histology_patch = None
        self.histology_patch_black_bg = True

        self.fake_histo_image = kwargs.pop("fake_histo_image")
        if self.fake_histo_image is not None:
            self.fake_histo_updated(self.fake_histo_image)

    def _update_display(self, image, view_widget):
        if image is not None:
            width = view_widget.width()
            height = view_widget.height()
            if image.shape[1] > image.shape[0]:
                height = int(image.shape[0] / image.shape[1] * width)
            else:
                width = int(image.shape[1] / image.shape[0] * height)
            view_widget.setPixmap(np2pixmap(image).scaled(width, height, Qt.KeepAspectRatio))

    def fake_histo_updated(self, fake_histo_image):
        self.fake_histo_image = fake_histo_image
        # self.fakeHistologyImageView.setPixmap(np2pixmap(self.fake_histo_image).scaled(300, 300, Qt.KeepAspectRatio))
        self._update_display(self.fake_histo_image, self.fakeHistologyImageView)

    def toggle_clearAllButton(self):
        msgbox = QMessageBox(self)
        msgbox.setWindowTitle("Clear All?")
        msgbox.setText("Are you sure to clear all?\nYes to confirm, Cancel to return")
        msgbox.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        msgbox.setDefaultButton(QMessageBox.Cancel)
        ret = msgbox.exec()
        if ret == QMessageBox.Cancel:
            return
        else:
            self.histo_view_item = None
            self.original_histo_image = None
            self.histology_patch = None
            self.histology_patch_black_bg = True
            self.fake_histo_image = None

            self.selectedHistoPatchBgGroupbox.setChecked(True)

            self.histologyImageView.scene().clear()
            self.histologyImageView.viewport().update()

            self.fakeHistologyImageView.clear()
            self.fakeHistologyImageView.update()

            self.selectedHistologyPatchView.clear()
            self.selectedHistologyPatchView.update()

    def toggle_loadWSIButton(self):
        img_name, _ = QFileDialog.getOpenFileName(self, "Open Image File", "*.jpg;;*.png;;*.jpeg;;*.tiff;;*.tif")
        if not img_name:
            return

        self.original_histo_image = io.imread(img_name)
        self.histo_view_item = self.histologyImageView.scene().addPixmap(QPixmap(img_name))
        self.histologyImageView.fitInView(self.histo_view_item, Qt.KeepAspectRatio)
        self.histologyImageView.show()
        self.statusLabel.setText("Loaded WSI " + img_name)
        pass

    def toggle_selectSquareAreaButton(self):
        if self.histo_view_item is None:
            return

        start_pos, end_pos = self.histologyImageView.get_patch_pos()
        if not start_pos or not end_pos:
            QMessageBox.warning(self, "Empty patch", "No patch selected, please select one first!", QMessageBox.Ok, QMessageBox.Ok)
            return

        start_pos = self.histologyImageView.mapToScene(self.histologyImageView.select_start_pos)
        end_pos = self.histologyImageView.mapToScene(self.histologyImageView.select_end_pos)

        patch_original = self.original_histo_image[int(start_pos.y()):int(end_pos.y()), int(start_pos.x()):int(end_pos.x()), ...]
        # if patch_original.shape[0] != patch_original.shape[1]:
        #     if patch_original.shape[0] > patch_original.shape[1]:
        #         patch_original = np.pad(patch_original, [(0, 0), (0, patch_original.shape[0] - patch_original.shape[1]), (0, 0)], constant_values=256)
        #     else:
        #         patch_original = np.pad(patch_original, [(0, patch_original.shape[1] - patch_original.shape[0]), (0, 0), (0, 0)], constant_values=256)

        if self.histology_patch_black_bg and len(patch_original.shape) > 2:
            patch_original, mask = set_bg_colour_histo(patch_original)

        # self.selectedHistologyPatchView.setPixmap(np2pixmap(patch_original).scaled(300, 300, Qt.KeepAspectRatio))
        self._update_display(patch_original, self.selectedHistologyPatchView)
        self.histology_patch = patch_original

        self.patch_selected_signal.emit(self.histology_patch, start_pos, end_pos)

    def toggle_deleteSelectionButton(self):
        self.selectedHistologyPatchView.setPixmap(QPixmap())
        self.histologyImageView.reset_selection()
        self.histology_patch = None
        self.patch_selected_signal.emit(None, None, None)
        pass

    def update_status(self, string):
        self.statusLabel.setText(string)

    def stateChanged_selectedHistoPatchBgGroupbox(self, checked):
        if checked:
            self.histology_patch_black_bg = True
        else:
            self.histology_patch_black_bg = False

    def crop_histology_image(self, start_pos_x, start_pos_y, size):
        return self.original_histo_image[start_pos_x:start_pos_x + size, start_pos_y:start_pos_y+size]

def plot_test(images: list):
    n_images = len(images)
    _, axes = plt.subplots(1, n_images)
    for i in range(n_images):
        axes[i].imshow(images[i])

    plt.tight_layout()
    plt.show()


class SimpleGraphicsView(QGraphicsView):
    def __init__(self, scene, parent):
        super(SimpleGraphicsView, self).__init__(scene, parent)
        self.maingui = None
        self.select_mode = True
        
        self.select_start_pos = None
        self.select_end_pos = None

        self.rubberBand = QRubberBand(QRubberBand.Rectangle, self)

        self.setDragMode(QGraphicsView.RubberBandDrag)

    def set_maingui(self, widget):
        self.maingui = widget

    def get_patch_pos(self):
        return self.select_start_pos, self.select_end_pos

    def mousePressEvent(self, event: QtGui.QMouseEvent) -> None:
        if event.button() == Qt.LeftButton:
            self.setCursor(Qt.CrossCursor)
            self.select_start_pos = event.pos()
            self.rubberBand.setGeometry(QRect(self.select_start_pos, QSize()))
            self.rubberBand.show()
        elif event.button() == Qt.RightButton:
            self.reset_selection()
            self.setCursor(Qt.ClosedHandCursor)
            self.select_start_pos = event.pos()
            self.select_mode = False

    def mouseMoveEvent(self, event: QtGui.QMouseEvent) -> None:
        self.maingui.update_status("x={}, y={}".format(event.x(), event.y()))
        if self.select_mode:
            current_pos = event.pos()
            modifiers = QtWidgets.QApplication.keyboardModifiers()
            if modifiers == Qt.ControlModifier:
                x_diff = current_pos.x() - self.select_start_pos.x()
                y_diff = current_pos.y() - self.select_start_pos.y()
                if x_diff >= y_diff:
                    current_pos.setY(self.select_start_pos.y() + x_diff)
                else:
                    current_pos.setX(self.select_start_pos.x() + y_diff)

            self.rubberBand.setGeometry(QRect(self.select_start_pos, current_pos).normalized())
            event.accept()
            return
        else:
            self.horizontalScrollBar().setValue(
                self.horizontalScrollBar().value() - (event.x() - self.select_start_pos.x()))
            self.verticalScrollBar().setValue(self.verticalScrollBar().value() - (event.y() - self.select_start_pos.y()))
            self.select_start_pos = event.pos()
            event.accept()

    def mouseReleaseEvent(self, event: QtGui.QMouseEvent) -> None:
        if event.button() == Qt.LeftButton:
            self.setCursor(Qt.ArrowCursor)
            current_pos = event.pos()
            modifiers = QtWidgets.QApplication.keyboardModifiers()
            if modifiers == Qt.ControlModifier:
                x_diff = current_pos.x() - self.select_start_pos.x()
                y_diff = current_pos.y() - self.select_start_pos.y()
                if x_diff >= y_diff:
                    current_pos.setY(self.select_start_pos.y() + x_diff)
                else:
                    current_pos.setX(self.select_start_pos.x() + y_diff)
            self.select_end_pos = current_pos
        elif event.button() == Qt.RightButton:
            self.setCursor(Qt.ArrowCursor)
            self.select_mode = True

    def wheelEvent(self, event):
        zoom_factor = 1.1
        if event.angleDelta().y() > 0:
            scale = zoom_factor
        else:
            scale = 1/zoom_factor
        self.scale(scale, scale)

    def reset_selection(self):
        self.rubberBand.hide()
        self.select_start_pos = None
        self.select_end_pos = None
        self.select_mode = True


if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = HistologyImageViewer(fake_histo_image=np.random.randint(0, 255, (300, 500, 3)))
    win.show()
    sys.exit(app.exec_())