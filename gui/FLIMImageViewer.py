# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FLIMImageViewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys

import cv2
from PyQt5.QtCore import pyqtSignal, Qt
from matplotlib import pyplot as plt
from skimage.color import rgba2rgb
from skimage.transform import resize

sys.path.append("../")

from gui.utils import tensor2image

import numpy as np
import skimage.color
import torch
from skimage import io, transform

from gui.utils import np2pixmap, image2tensor

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QApplication, QWidget, QFileDialog, QMessageBox, QProgressDialog


class FLIMImageViewer(QWidget):
    # signals
    finish_generating = pyqtSignal(object, object)

    def __init__(self, *args, **kwargs):
        super(FLIMImageViewer, self).__init__()
        self.setObjectName("FLIMImageViewer")
        self.setWindowTitle("FLIM Image Viewer")
        self.resize(948, 442)

        gridLayout = QtWidgets.QGridLayout(self)
        gridLayout.setObjectName("gridLayout")

        groupBox = QtWidgets.QGroupBox(self)
        groupBox.setObjectName("groupBox")
        groupBox.setTitle("FLIM Image")
        horizontalLayout = QtWidgets.QHBoxLayout(groupBox)
        horizontalLayout.setContentsMargins(2, 2, 2, 2)
        horizontalLayout.setSpacing(2)
        horizontalLayout.setObjectName("horizontalLayout")

        self.flimView = QtWidgets.QLabel(groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.flimView.sizePolicy().hasHeightForWidth())
        self.flimView.setSizePolicy(sizePolicy)
        self.flimView.setMinimumSize(QtCore.QSize(300, 300))
        self.flimView.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.flimView.setText("")
        self.flimView.setObjectName("flimView")
        # self.flimView.setScaledContents(True)
        horizontalLayout.addWidget(self.flimView)
        gridLayout.addWidget(groupBox, 1, 0, 1, 1)

        groupBox_3 = QtWidgets.QGroupBox(self)
        groupBox_3.setObjectName("groupBox_3")
        groupBox_3.setTitle("Intensity Image as Mask and Generated Binary Mask)")
        horizontalLayout_3 = QtWidgets.QHBoxLayout(groupBox_3)
        horizontalLayout_3.setContentsMargins(2, 2, 2, 2)
        horizontalLayout_3.setSpacing(2)
        horizontalLayout_3.setObjectName("horizontalLayout_2")
        self.maskView = QtWidgets.QLabel(groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maskView.sizePolicy().hasHeightForWidth())
        self.maskView.setSizePolicy(sizePolicy)
        self.maskView.setMinimumSize(QtCore.QSize(300, 300))
        self.maskView.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.maskView.setText("")
        self.maskView.setObjectName("maskView")
        # self.maskView.setScaledContents(True)
        horizontalLayout_3.addWidget(self.maskView)
        gridLayout.addWidget(groupBox_3, 1, 1, 1, 1)

        groupBox_4 = QtWidgets.QGroupBox(self)
        groupBox_4.setObjectName("groupBox_4")
        groupBox_4.setTitle("Generated Binary Mask")
        horizontalLayout_4 = QtWidgets.QHBoxLayout(groupBox_4)
        horizontalLayout_4.setContentsMargins(2, 2, 2, 2)
        horizontalLayout_4.setSpacing(2)
        horizontalLayout_4.setObjectName("horizontalLayout_2")
        self.binMaskView = QtWidgets.QLabel(groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.binMaskView.sizePolicy().hasHeightForWidth())
        self.binMaskView.setSizePolicy(sizePolicy)
        self.binMaskView.setMinimumSize(QtCore.QSize(300, 300))
        self.binMaskView.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.binMaskView.setText("")
        self.binMaskView.setObjectName("binMaskView")
        # self.binMaskView.setScaledContents(True)
        horizontalLayout_4.addWidget(self.binMaskView)
        gridLayout.addWidget(groupBox_4, 1, 2, 1, 1)

        groupBox_2 = QtWidgets.QGroupBox(self)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("Geberated Fake Histology Image")
        horizontalLayout_2 = QtWidgets.QHBoxLayout(groupBox_2)
        horizontalLayout_2.setContentsMargins(2, 2, 2, 2)
        horizontalLayout_2.setSpacing(2)
        horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.fakeFlimView = QtWidgets.QLabel(groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fakeFlimView.sizePolicy().hasHeightForWidth())
        self.fakeFlimView.setSizePolicy(sizePolicy)
        self.fakeFlimView.setMinimumSize(QtCore.QSize(300, 300))
        self.fakeFlimView.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.fakeFlimView.setText("")
        self.fakeFlimView.setObjectName("fakeFlimView")
        # self.fakeFlimView.setScaledContents(True)
        horizontalLayout_2.addWidget(self.fakeFlimView)
        gridLayout.addWidget(groupBox_2, 1, 3, 1, 1)

        widget = QtWidgets.QWidget(self)
        widget.setObjectName("widget")
        gridLayout_2 = QtWidgets.QGridLayout(widget)
        gridLayout_2.setObjectName("gridLayout_2")

        self.loadFlimButton = QtWidgets.QPushButton(widget)
        self.loadFlimButton.setObjectName("loadFlimButton")
        self.loadFlimButton.setText("Load FLIM")
        self.loadFlimButton.clicked.connect(self.toggle_loadFlimButton)
        gridLayout_2.addWidget(self.loadFlimButton, 0, 0, 1, 1)

        self.flimLineEdit = QtWidgets.QLineEdit(widget)
        self.flimLineEdit.setFrame(False)
        self.flimLineEdit.setReadOnly(True)
        self.flimLineEdit.setObjectName("flimLineEdit")
        gridLayout_2.addWidget(self.flimLineEdit, 0, 2, 1, 2)

        self.loadPretrainedParamsButton = QtWidgets.QPushButton(widget)
        self.loadPretrainedParamsButton.setObjectName("loadPretrainedParamsButton")
        self.loadPretrainedParamsButton.setText("Load Pretrained Parameters")
        self.loadPretrainedParamsButton.clicked.connect(self.toggle_loadPretrainedParamsButton)
        gridLayout_2.addWidget(self.loadPretrainedParamsButton, 1, 0, 1, 1)

        self.pretrainedParamsLineEdit = QtWidgets.QLineEdit(widget)
        self.pretrainedParamsLineEdit.setFrame(False)
        self.pretrainedParamsLineEdit.setReadOnly(True)
        self.pretrainedParamsLineEdit.setObjectName("pretrainedParamsLineEdit")
        gridLayout_2.addWidget(self.pretrainedParamsLineEdit, 1, 2, 1, 2)

        self.loadMaskButton = QtWidgets.QPushButton(widget)
        self.loadMaskButton.setObjectName("loadMaskButton")
        self.loadMaskButton.setText("Load Mask")
        self.loadMaskButton.clicked.connect(self.toggle_loadMaskButton)
        gridLayout_2.addWidget(self.loadMaskButton, 2, 0, 1, 1)

        self.maskLineEdit = QtWidgets.QLineEdit(widget)
        self.maskLineEdit.setFrame(False)
        self.maskLineEdit.setReadOnly(True)
        self.maskLineEdit.setObjectName("maskLineEdit")
        gridLayout_2.addWidget(self.maskLineEdit, 2, 2, 1, 2)

        self.thresholdLabel = QtWidgets.QLabel(self)
        self.thresholdLabel.setObjectName("thresholdLabel")
        self.thresholdLabel.setText("Custom Mask Threshold: ")
        gridLayout_2.addWidget(self.thresholdLabel, 3, 0, 1, 1)

        self.customThresholdSlider = QtWidgets.QSlider(Qt.Horizontal)
        self.customThresholdSlider.setObjectName("customThresholdSlider")
        self.customThresholdSlider.setRange(0, 255)
        self.customThresholdSlider.valueChanged.connect(self._threshold_updated)
        gridLayout_2.addWidget(self.customThresholdSlider, 3, 2, 1, 1)

        gridLayout.addWidget(widget, 0, 0, 1, 4)

        self.clearButton = QtWidgets.QPushButton(widget)
        self.clearButton.setObjectName("clearButton")
        self.clearButton.setText("Clear All")
        self.clearButton.clicked.connect(self.toggle_clearButton)
        gridLayout_2.addWidget(self.clearButton, 0, 3, 1, 1)

        self.processFLIMButton = QtWidgets.QPushButton(widget)
        self.processFLIMButton.setObjectName("processFLIMButton")
        self.processFLIMButton.setText("Generate")
        self.processFLIMButton.clicked.connect(self.toggle_processFLIMButton)
        gridLayout_2.addWidget(self.processFLIMButton, 1, 3, 1, 1)

        self.useFLIMButton = QtWidgets.QPushButton(widget)
        self.useFLIMButton.setObjectName("useFLIMButton")
        self.useFLIMButton.setText("Use FLIM for Regression")
        self.useFLIMButton.clicked.connect(self.toggle_useFLIMButton)
        gridLayout_2.addWidget(self.useFLIMButton, 2, 3, 1, 1)

        self.setLayout(gridLayout)

        self.flim_image = None
        self.image_file = None
        self.pretrained_params_file = None
        self.mask_file = None
        self.mask_image = None
        self.bin_mask = None
        self.fake_histology_image = None

    def toggle_clearButton(self):
        msgbox = QMessageBox(self)
        msgbox.setWindowTitle("Clear All?")
        msgbox.setText("Are you sure to clear all?\nYes to confirm, Cancel to return")
        msgbox.setStandardButtons(QMessageBox.Yes | QMessageBox.Cancel)
        msgbox.setDefaultButton(QMessageBox.Cancel)
        ret = msgbox.exec()
        if ret == QMessageBox.Cancel:
            return

        self._clear_gui()

    def _clear_gui(self):
        self.flim_image = None
        self.image_file = None
        self.pretrained_params_file = None
        self.mask_file = None
        self.mask_image = None
        self.bin_mask = None
        self.flimLineEdit.setText("")
        self.maskLineEdit.setText("")
        self.pretrainedParamsLineEdit.setText("")
        self.fakeFlimView.clear()
        self.flimView.clear()
        self.maskView.clear()
        self.binMaskView.clear()
        self.thresholdLabel.setText("Custom Mask Threshold: ")
        self.customThresholdSlider.setValue(0)
        self.keepAspectRatioCheckbox.setChecked(True)
        self.fake_histology_image = None

    def resizeEvent(self, event):
        self._update_display(self.flim_image, self.flimView)
        self._update_display(self.mask_image, self.maskView)
        self._update_display(self.bin_mask, self.binMaskView)
        self._update_display(self.fake_histology_image, self.fakeFlimView)


    def _update_display(self, image, view_widget):
        if image is not None:
            width = view_widget.width()
            height = view_widget.height()
            if image.shape[1] > image.shape[0]:
                height = int(image.shape[0] / image.shape[1] * width)
            else:
                width = int(image.shape[1] / image.shape[0] * height)
            view_widget.setPixmap(np2pixmap(image).scaled(width, height, Qt.KeepAspectRatio))

    def toggle_loadFlimButton(self):
        image_file, _ = QFileDialog.getOpenFileName(self, "Open FLIM Image",
                                                    filter="Images (*.png *.jpg *.bmp);; All Files (*.*)")
        if image_file == "":
            return

        self.image_file = image_file
        flim_image = cv2.imread(self.image_file, cv2.IMREAD_UNCHANGED)
        if flim_image.shape[2] == 4:
            flim_image = cv2.cvtColor(flim_image, cv2.COLOR_BGRA2BGR)
        self.flim_image = cv2.cvtColor(flim_image, cv2.COLOR_BGR2RGB)
        self.flimLineEdit.setText(self.image_file)

        self._update_display(self.flim_image, self.flimView)

    def toggle_loadPretrainedParamsButton(self):
        pretrained_params_file, _ = QFileDialog.getOpenFileName(self,
                                                                "Open Pretrained Parameters to generate fake histology images",
                                                                filter="All Files (*.*)")
        if pretrained_params_file == "":
            return

        self.pretrained_params_file = pretrained_params_file
        self.pretrainedParamsLineEdit.setText(self.pretrained_params_file)

    def toggle_loadMaskButton(self):
        mask_file, _ = QFileDialog.getOpenFileName(self, "Open Intensity as Mask",
                                                   filter="Images (*.png *.jpg *.bmp);; All Files (*.*)")
        if mask_file == "":
            return

        self.mask_file = mask_file
        self.maskView.setPixmap(QPixmap(self.mask_file))

        self.mask_image = cv2.imread(self.mask_file)
        self.mask_image = cv2.cvtColor(self.mask_image, cv2.COLOR_BGR2RGB)
        self._update_display(self.mask_image, self.maskView)

        self.bin_mask = cv2.imread(self.mask_file, cv2.IMREAD_GRAYSCALE)
        self.bin_mask = cv2.equalizeHist(self.bin_mask)

        threshold, _ = cv2.threshold(self.bin_mask, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        self._threshold_updated(threshold)

        self.maskLineEdit.setText(self.mask_file)

    def _threshold_updated(self, threshold):
        if self.bin_mask is None:
            return

        self.threshold = threshold
        bin_mask = np.uint8(self.bin_mask > threshold) * 255
        self._update_display(bin_mask, self.binMaskView)
        self.thresholdLabel.setText("Custom Mask Threshold: {}".format(int(threshold)))
        self.customThresholdSlider.setValue(int(threshold))

    def toggle_processFLIMButton(self):
        msg_box = QMessageBox(self)
        if self.flim_image is None:
            msg_box.setText("FLIM image is not loaded.")
            msg_box.exec()
            return
        if self.pretrained_params_file is None:
            msg_box.setText("Pretrained Parameters is not loaded")
            msg_box.exec()
            return

        self._generate_fake_histology()

        self.finish_generating.emit(self.fake_histology_image, self.image_file)

    def toggle_useFLIMButton(self):
        msg_box = QMessageBox(self)
        if self.flim_image is None:
            msg_box.setText("FLIM image is not loaded.")
            msg_box.exec()
            return

        if self.bin_mask is not None:
            bin_mask = (self.bin_mask > self.threshold).astype(np.uint8)
            flim_image_masked = self.flim_image.copy()
            flim_image_masked *= np.dstack([bin_mask, bin_mask, bin_mask])
        else:
            flim_image_masked = self.flim_image

        self._update_display(flim_image_masked, self.fakeFlimView)
        self.finish_generating.emit(flim_image_masked, self.image_file)

    def _generate_fake_histology(self):
        if self.pretrained_params_file is None or self.pretrained_params_file == "" or not os.path.exists(
                self.pretrained_params_file):
            raise ValueError(f"Unknown Pretrained Parameters File: {self.pretrained_params_file}")

        progress = QProgressDialog(self)
        progress.setWindowTitle("Load Pretrained Parameters")
        progress.setRange(0, 3)
        progress.show()
        progress.setValue(0)

        if torch.cuda.device_count() >= 1:
            device = "cuda"
        else:
            device = "cpu"

        progress.setLabelText("Preparing data")
        from gui.models import Generator
        generator = Generator(3, 3).to(device)

        # if torch.cuda.device_count() > 1:
        #     generator = torch.nn.DataParallel(generator)
        # generator.to(device)
        progress.setValue(1)

        progress.setLabelText("Loading parameters")
        generator.load_state_dict(torch.load(self.pretrained_params_file, map_location=device))
        generator.eval()
        progress.setValue(2)

        progress.setLabelText("Generating fake histology")
        flim_image = image2tensor(self.flim_image).to(device)
        fake_histology_image = generator(flim_image)
        fake_histology_image = tensor2image(fake_histology_image)
        fake_histology_image = cv2.resize(fake_histology_image, (self.flim_image.shape[1], self.flim_image.shape[0]), interpolation=cv2.INTER_CUBIC)
        fake_histology_image = (fake_histology_image * 255).astype(np.uint8)

        if self.bin_mask is not None:
            bin_mask = np.uint8(self.bin_mask > self.threshold)
            if bin_mask.shape[:2] == fake_histology_image.shape[:2]:
                fake_histology_image *= np.dstack([bin_mask, bin_mask, bin_mask])

        self._update_display(fake_histology_image, self.fakeFlimView)

        progress.setValue(3)
        self.generator = generator
        self.device = device
        self.fake_histology_image = fake_histology_image


def plot_test(images):
    num_images = len(images)
    _, axes = plt.subplots(1, num_images)
    for i in range(num_images):
        if len(images[i].shape) == 2:
            cmap = "gray"
        else:
            cmap = "jet"
        axes[i].imshow(images[i], cmap=cmap)

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = FLIMImageViewer()
    win.show()
    sys.exit(app.exec_())
