# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'RegressionViewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import pickle
import sys
import time

import cv2
import kornia
import numpy as np
import pyqtgraph as pg
import skimage.io
import torch
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt, QObject, pyqtSignal, QThread, QPoint
from PyQt5.QtGui import QPixmap, QIntValidator, QDoubleValidator
from PyQt5.QtWidgets import QWidget, QApplication, QLabel, QProgressDialog, QMessageBox, QDialog, QSlider
from kornia.geometry import HomographyWarper
from pyqtgraph import exporters
from skimage import io, transform
from skimage.color import rgba2rgb, rgb2gray
from torch.optim.lr_scheduler import StepLR

from gui.SaveRegressionResultsViewer import SaveRegressionResultsViewer
from gui.utils import np2pixmap, image2tensor, tensor2image, to_gray, warp_image
from gui.models import HomoParamRegression


HomoMatrixEsitmationAlgorithms = {
    0: "Intensity-based regression",
    1: "Enhanced cross-correlation",
}


class RegressionViewer(QWidget):

    def __init__(self, *args, **kwargs):
        super(RegressionViewer, self).__init__()
        self.setObjectName("RegressionViewer")
        self.setWindowTitle("Homography Regression Viewer")
        self.resize(1518, 397)

        gridLayout_6 = QtWidgets.QGridLayout(self)
        gridLayout_6.setObjectName("gridLayout_6")

        ## Fake Histology View groupbox
        widget_10 = QtWidgets.QWidget(self)
        widget_10.setObjectName("widget_10")
        groupBox_10_gridLayout__10 = QtWidgets.QGridLayout(widget_10)
        groupBox_10_gridLayout__10.setContentsMargins(0, 0, 0, 0)
        groupBox_10_gridLayout__10.setSpacing(2)
        groupBox_10_gridLayout__10.setObjectName("groupBox_10_gridLayout__10")

        groupBox_3 = QtWidgets.QGroupBox(widget_10)
        groupBox_3.setObjectName("groupBox_3")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(groupBox_3.sizePolicy().hasHeightForWidth())
        groupBox_3.setSizePolicy(sizePolicy)
        groupBox_3.setTitle("Fake Histology from FLIM")
        gridLayout_2 = QtWidgets.QGridLayout(groupBox_3)
        gridLayout_2.setObjectName("gridLayout_2")

        self.grayFakeHistologyCheckbox = QtWidgets.QCheckBox(groupBox_3)
        self.grayFakeHistologyCheckbox.setObjectName("grayFakeHistologyCheckbox")
        self.grayFakeHistologyCheckbox.setText("Gray Image")
        gridLayout_2.addWidget(self.grayFakeHistologyCheckbox, 0, 0, 1, 1)
        self.inverseColorFakeHistologyCheckbox = QtWidgets.QCheckBox(groupBox_3)
        self.inverseColorFakeHistologyCheckbox.setObjectName("inverseColorFakeHistologyCheckbox")
        self.inverseColorFakeHistologyCheckbox.setText("Inverse Colour")
        self.inverseColorFakeHistologyCheckbox.setEnabled(False)
        gridLayout_2.addWidget(self.inverseColorFakeHistologyCheckbox, 0, 1, 1, 1)
        self.contrastEnhanceFakeHistologyCheckbox = QtWidgets.QCheckBox(groupBox_3)
        self.contrastEnhanceFakeHistologyCheckbox.setObjectName("contrastEnhanceFakeHistologyCheckbox")
        self.contrastEnhanceFakeHistologyCheckbox.setText("Enhance Contrast")
        self.contrastEnhanceFakeHistologyCheckbox.setEnabled(False)
        gridLayout_2.addWidget(self.contrastEnhanceFakeHistologyCheckbox, 0, 2, 1, 1)

        self.label_fakeHistoSliderLabel = QLabel("Threshold: 0", parent=self)
        self.label_fakeHistoSliderLabel.setObjectName("label_fakeHistoSliderLabel")
        gridLayout_2.addWidget(self.label_fakeHistoSliderLabel, 1, 0, 1, 1)
        self.fakeHistoSlider = QSlider(Qt.Horizontal)
        self.fakeHistoSlider.setObjectName("fakeHistoSlider")
        self.fakeHistoSlider.setRange(0, 255)
        self.fakeHistoSlider.setEnabled(False)
        gridLayout_2.addWidget(self.fakeHistoSlider, 1, 1, 1, 2)

        self.fakeHistologyView = QLabel(groupBox_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fakeHistologyView.sizePolicy().hasHeightForWidth())
        self.fakeHistologyView.setSizePolicy(sizePolicy)
        self.fakeHistologyView.setMinimumSize(QtCore.QSize(300, 300))
        self.fakeHistologyView.setObjectName("fakeHistologyView")
        self.fakeHistologyView.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.fakeHistologyView.setText("")
        # self.fakeHistologyView.setStyleSheet("border: 1px solid black;\n"
        #                                           "background-color: rgb(0, 0, 0);")
        gridLayout_2.addWidget(self.fakeHistologyView, 2, 0, 1, 3)
        groupBox_10_gridLayout__10.addWidget(groupBox_3, 0, 0, 1, 1)

        ## Histology Patch Groupbox
        groupBox_2 = QtWidgets.QGroupBox(widget_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(groupBox_2.sizePolicy().hasHeightForWidth())
        groupBox_2.setSizePolicy(sizePolicy)
        groupBox_2.setObjectName("groupBox_2")
        groupBox_2.setTitle("Histology Patch")
        gridLayout_3 = QtWidgets.QGridLayout(groupBox_2)
        gridLayout_3.setObjectName("gridLayout_3")

        self.grayHistoPatchCheckbox = QtWidgets.QCheckBox(groupBox_2)
        self.grayHistoPatchCheckbox.setObjectName("grayHistoPatchCheckbox")
        self.grayHistoPatchCheckbox.setText("Gray Image")
        gridLayout_3.addWidget(self.grayHistoPatchCheckbox, 0, 0, 1, 1)
        self.inverseColorHistoPatchCheckbox = QtWidgets.QCheckBox(groupBox_2)
        self.inverseColorHistoPatchCheckbox.setObjectName("inverseColorHistoPatchCheckbox")
        self.inverseColorHistoPatchCheckbox.setText("Inverse Colour")
        self.inverseColorHistoPatchCheckbox.setEnabled(False)
        gridLayout_3.addWidget(self.inverseColorHistoPatchCheckbox, 0, 1, 1, 1)
        self.contrastEnhanceHistoPatchCheckbox = QtWidgets.QCheckBox(groupBox_2)
        self.contrastEnhanceHistoPatchCheckbox.setObjectName("contrastEnhanceHistoPatchCheckbox")
        self.contrastEnhanceHistoPatchCheckbox.setText("Enhance Contrast")
        self.contrastEnhanceHistoPatchCheckbox.setEnabled(False)
        gridLayout_3.addWidget(self.contrastEnhanceHistoPatchCheckbox, 0, 2, 1, 1)

        self.label_histoPatchSliderLabel = QLabel("Threshold: 0", parent=self)
        self.label_histoPatchSliderLabel.setObjectName("label_histoPatchSliderLabel")
        gridLayout_3.addWidget(self.label_histoPatchSliderLabel, 1, 0, 1, 1)
        self.histoPatchSlider = QSlider(Qt.Horizontal)
        self.histoPatchSlider.setObjectName("histoPatchSlider")
        self.histoPatchSlider.setRange(0, 255)
        self.histoPatchSlider.setEnabled(False)
        gridLayout_3.addWidget(self.histoPatchSlider, 1, 1, 1, 2)

        self.wsiPatchView = QLabel(groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.wsiPatchView.sizePolicy().hasHeightForWidth())
        self.wsiPatchView.setSizePolicy(sizePolicy)
        self.wsiPatchView.setMinimumSize(QtCore.QSize(300, 300))
        self.wsiPatchView.setObjectName("wsiPatchView")
        self.wsiPatchView.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.wsiPatchView.setText("")
        gridLayout_3.addWidget(self.wsiPatchView, 2, 0, 1, 3)
        groupBox_10_gridLayout__10.addWidget(groupBox_2, 0, 1, 1, 1)

        ## Blending view groupbox
        groupBox_4 = QtWidgets.QGroupBox(widget_10)
        groupBox_4.setObjectName("groupBox_4")
        groupBox_4.setTitle("Blending")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(groupBox_4.sizePolicy().hasHeightForWidth())
        gridLayout_4 = QtWidgets.QGridLayout(groupBox_4)
        gridLayout_4.setObjectName("gridLayout_4")

        label_5 = QtWidgets.QLabel(groupBox_4)
        label_5.setObjectName("label_5")
        label_5.setText(" ")
        gridLayout_4.addWidget(label_5, 0, 0, 1, 1)
        self.label_blendingFactorSliderLabel = QtWidgets.QLabel(groupBox_4)
        self.label_blendingFactorSliderLabel.setObjectName("label_blendingFactorSliderLabel")
        self.label_blendingFactorSliderLabel.setText("Blending factor:  0.4")
        gridLayout_4.addWidget(self.label_blendingFactorSliderLabel, 1, 0, 1, 1)
        self.blendingFactorSlider = QSlider(Qt.Horizontal)
        self.blendingFactorSlider.setObjectName("blendingFactorSlider")
        self.blendingFactorSlider.setRange(0, 100)
        self.blendingFactorSlider.setSingleStep(1)
        self.blendingFactorSlider.setValue(40)
        gridLayout_4.addWidget(self.blendingFactorSlider, 1, 1, 1, 1)

        self.blendingView = QLabel(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.blendingView.sizePolicy().hasHeightForWidth())
        self.blendingView.setSizePolicy(sizePolicy)
        self.blendingView.setMinimumSize(QtCore.QSize(300, 300))
        self.blendingView.setObjectName("blendingView")
        self.blendingView.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.blendingView.setText("")
        gridLayout_4.addWidget(self.blendingView, 2, 0, 1, 2)
        groupBox_10_gridLayout__10.addWidget(groupBox_4, 0, 2, 1, 1)

        ## Loss ploting view groupbox
        groupBox_5 = QtWidgets.QGroupBox(widget_10)
        groupBox_5.setObjectName("groupBox_5")
        groupBox_5.setTitle("Loss")
        gridLayout_5 = QtWidgets.QGridLayout(groupBox_5)
        gridLayout_5.setObjectName("gridLayout_5")

        self.lossPlotWidget = pg.PlotWidget()
        self.lossPlotWidget.setMinimumSize(QtCore.QSize(500, 0))
        self.lossPlotWidget.setObjectName("lossPlotWidget")
        self.lossPlotWidget.setBackground("w")
        self.lossPlotWidget.setLabel("left", "Loss")
        self.lossPlotWidget.setLabel("bottom", "Epoch")
        self.lossPlotWidget.showGrid(x=True, y=True)
        pen = pg.mkPen(color=(255, 0, 0))
        self.data_line = self.lossPlotWidget.plot([], [], pen=pen)
        gridLayout_5.addWidget(self.lossPlotWidget, 0, 0, 1, 1)
        groupBox_10_gridLayout__10.addWidget(groupBox_5, 0, 3, 1, 1)

        gridLayout_6.addWidget(widget_10, 1, 0, 1, 1)

        ## Parameter view groupbox
        groupBox = QtWidgets.QWidget(self)
        groupBox.setObjectName("groupBox")
        gridLayout = QtWidgets.QGridLayout(groupBox)
        gridLayout.setContentsMargins(2, 2, 2, 2)
        gridLayout.setSpacing(9)
        gridLayout.setObjectName("gridLayout")

        label = QtWidgets.QLabel(groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(label.sizePolicy().hasHeightForWidth())
        label.setSizePolicy(sizePolicy)
        label.setObjectName("label")
        label.setText("No. Iterations: ")
        gridLayout.addWidget(label, 0, 0, 1, 1)

        self.numIterationLineEdit = QtWidgets.QLineEdit(groupBox)
        self.intValidator = QIntValidator()
        self.numIterationLineEdit.setValidator(self.intValidator)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numIterationLineEdit.sizePolicy().hasHeightForWidth())
        self.numIterationLineEdit.setSizePolicy(sizePolicy)
        self.numIterationLineEdit.setMinimumSize(QtCore.QSize(60, 0))
        self.numIterationLineEdit.setObjectName("numIterationLineEdit")
        self.numIterationLineEdit.setText("200")
        gridLayout.addWidget(self.numIterationLineEdit, 0, 2, 1, 1)

        label_2 = QtWidgets.QLabel(groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(label_2.sizePolicy().hasHeightForWidth())
        label_2.setSizePolicy(sizePolicy)
        label_2.setObjectName("label_2")
        label_2.setText("Learning Rate: ")
        gridLayout.addWidget(label_2, 0, 3, 1, 1)

        self.lrLineEdit = QtWidgets.QLineEdit(groupBox)
        self.floatValidator = QDoubleValidator()
        self.lrLineEdit.setValidator(self.floatValidator)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lrLineEdit.sizePolicy().hasHeightForWidth())
        self.lrLineEdit.setSizePolicy(sizePolicy)
        self.lrLineEdit.setObjectName("lrLineEdit")
        self.lrLineEdit.setText("0.01")
        gridLayout.addWidget(self.lrLineEdit, 0, 4, 1, 1)

        label_3 = QtWidgets.QLabel(groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(label_3.sizePolicy().hasHeightForWidth())
        label_3.setSizePolicy(sizePolicy)
        label_3.setObjectName("label_3")
        label_3.setText("Decay Iterations: ")
        gridLayout.addWidget(label_3, 0, 5, 1, 1)

        self.decayLineEdit = QtWidgets.QLineEdit(groupBox)
        self.decayLineEdit.setValidator(self.intValidator)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.decayLineEdit.sizePolicy().hasHeightForWidth())
        self.decayLineEdit.setSizePolicy(sizePolicy)
        self.decayLineEdit.setObjectName("decayLineEdit")
        self.decayLineEdit.setText("100")
        gridLayout.addWidget(self.decayLineEdit, 0, 6, 1, 1)

        label_4 = QtWidgets.QLabel(groupBox)
        label_4.setObjectName("label_4")
        label_4.setText("Comparing Window Size: ")
        gridLayout.addWidget(label_4, 0, 7, 1, 1)

        self.comparingWindowSizeLineEdit = QtWidgets.QLineEdit(groupBox)
        self.comparingWindowSizeLineEdit.setValidator(self.intValidator)
        self.comparingWindowSizeLineEdit.setObjectName("comparingWindowSizeLineEdit")
        self.comparingWindowSizeLineEdit.setText("50")
        gridLayout.addWidget(self.comparingWindowSizeLineEdit, 0, 8, 1, 1)

        self.homoMatrixComboBox = QtWidgets.QComboBox(groupBox)
        self.homoMatrixComboBox.setObjectName("homoMatrixComboBox")
        # self.homoMatrixComboBox.addItem("Regression")
        # self.homoMatrixComboBox.addItem("Enhance cross-correlation")
        for k, v in HomoMatrixEsitmationAlgorithms.items():
            self.homoMatrixComboBox.addItem("")
            self.homoMatrixComboBox.setItemText(k, v)
        gridLayout.addWidget(self.homoMatrixComboBox, 0, 9, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        gridLayout.addItem(spacerItem1, 0, 10, 1, 1)

        self.startRegressionButton = QtWidgets.QPushButton(groupBox)
        self.startRegressionButton.setObjectName("startRegressionButton")
        self.startRegressionButton.setText("Start Regression")
        self.startRegressionButton.clicked.connect(self.toggle_startRegressionButton)
        gridLayout.addWidget(self.startRegressionButton, 0, 11, 1, 1)

        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        gridLayout.addItem(spacerItem2, 0, 12, 1, 1)

        self.saveButton = QtWidgets.QPushButton(groupBox)
        self.saveButton.setObjectName("saveButton")
        self.saveButton.setText("Save Results")
        self.saveButton.clicked.connect(self.toggle_saveButton)
        gridLayout.addWidget(self.saveButton, 0, 13, 1, 1)

        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        gridLayout.addItem(spacerItem3, 0, 14, 1, 1)

        gridLayout_6.addWidget(groupBox, 0, 0, 1, 1)

        self.setLayout(gridLayout_6)

        self.epochs = 200
        self.lr = 0.01
        self.decay_epoch = 100
        self.comparing_windows_size = 50
        if "fake_histo_image" in kwargs:
            self.original_fake_histo_image = kwargs.pop("fake_histo_image")
            # self.fakeHistologyView.setPixmap(
            #     np2pixmap(self.original_fake_histo_image).scaled(300, 300, Qt.KeepAspectRatio))
            self._update_display(self.original_fake_histo_image, self.fakeHistologyView)
        else:
            self.original_fake_histo_image = None

        if "histology_patch" in kwargs:
            self.original_histology_patch = kwargs.pop("histology_patch")
            # self.wsiPatchView.setPixmap(np2pixmap(self.original_histology_patch).scaled(300, 300, Qt.KeepAspectRatio))
            self._update_display(self.original_histology_patch, self.wsiPatchView)
        else:
            self.original_histology_patch = None

        if "flim_image_file" in kwargs:
            self.flim_image_file = kwargs.pop("flim_image_file")
        else:
            self.flim_image_file = None

        if "histo_patch_start_pos" in kwargs:
            self.histo_patch_start_pos = kwargs.pop("histo_patch_start_pos")
        else:
            self.histo_patch_start_pos = None

        if "histo_patch_end_pos" in kwargs:
            self.histo_patch_end_pos = kwargs.pop("histo_patch_end_pos")
        else:
            self.histo_patch_end_pos = None

        self.fake_histo_image_processed = None
        self.histology_patch_processed = None

        self.homo_matrix = None

        self.hm_algorithm = 0

        self.blending_factor = 0.4

        self.update_gui()

        self.connect_signals()

    def connect_signals(self):
        self.grayFakeHistologyCheckbox.stateChanged.connect(self.update_gui)
        self.inverseColorFakeHistologyCheckbox.stateChanged.connect(self.update_gui)
        self.contrastEnhanceFakeHistologyCheckbox.stateChanged.connect(self.update_gui)
        self.grayHistoPatchCheckbox.stateChanged.connect(self.update_gui)
        self.inverseColorHistoPatchCheckbox.stateChanged.connect(self.update_gui)
        self.contrastEnhanceHistoPatchCheckbox.stateChanged.connect(self.update_gui)
        self.fakeHistoSlider.valueChanged.connect(self.update_gui)
        self.histoPatchSlider.valueChanged.connect(self.update_gui)
        self.homoMatrixComboBox.currentIndexChanged.connect(self.algorithm_selectionChanged)
        self.blendingFactorSlider.valueChanged.connect(self.update_gui)

    def algorithm_selectionChanged(self, i):
        self.hm_algorithm = i

    def resizeEvent(self, event):
        self.update_gui()

    def _update_display(self, image, view_widget):
        if image is not None:
            width = view_widget.width()
            height = view_widget.height()
            if image.shape[1] > image.shape[0]:
                height = int(image.shape[0] / image.shape[1] * width)
            else:
                width = int(image.shape[1] / image.shape[0] * height)
            view_widget.setPixmap(np2pixmap(image).scaled(width, height, Qt.KeepAspectRatio))

    def update_gui(self):
        if self.original_fake_histo_image is not None and self.original_histology_patch is not None:
            ## fake histo image view
            # fake_histo_image_processed = transform.resize(self.original_fake_histo_image, (256, 256))
            fake_histo_image_processed = self.original_fake_histo_image
            if len(fake_histo_image_processed.shape) > 2 and fake_histo_image_processed.shape[2] == 4:
                fake_histo_image_processed = rgba2rgb(fake_histo_image_processed)

            if self.grayFakeHistologyCheckbox.isChecked():
                self.inverseColorFakeHistologyCheckbox.setEnabled(True)
                self.contrastEnhanceFakeHistologyCheckbox.setEnabled(True)
                self.fakeHistoSlider.setEnabled(True)
                self.label_fakeHistoSliderLabel.setText("Threshold: {:d}".format(self.fakeHistoSlider.value()))
                if len(fake_histo_image_processed.shape) > 2:
                    fake_histo_image_processed = to_gray(fake_histo_image_processed,
                                                         inv_color=self.inverseColorFakeHistologyCheckbox.isChecked(),
                                                         contrast_enhance=self.contrastEnhanceFakeHistologyCheckbox.isChecked(),
                                                         threshold=self.fakeHistoSlider.value())
            else:
                self.inverseColorFakeHistologyCheckbox.setEnabled(False)
                self.contrastEnhanceFakeHistologyCheckbox.setEnabled(False)
                self.fakeHistoSlider.setEnabled(False)
                # fake_histo_image_processed = (fake_histo_image_processed*255).astype(np.uint8)
            # self.fakeHistologyView.setPixmap(np2pixmap(fake_histo_image_processed).scaled(300, 300, Qt.KeepAspectRatio))
            self._update_display(fake_histo_image_processed, self.fakeHistologyView)

            ## histology patch view
            histology_patch_processed = transform.resize(self.original_histology_patch, fake_histo_image_processed.shape[:2])
            if len(histology_patch_processed.shape) > 2 and histology_patch_processed.shape[2] == 4:
                histology_patch_processed = rgba2rgb(histology_patch_processed)
            if self.grayHistoPatchCheckbox.isChecked():
                self.inverseColorHistoPatchCheckbox.setEnabled(True)
                self.contrastEnhanceHistoPatchCheckbox.setEnabled(True)
                self.histoPatchSlider.setEnabled(True)
                self.label_histoPatchSliderLabel.setText("Threshold: {:d}".format(self.histoPatchSlider.value()))
                if len(histology_patch_processed.shape) > 2:
                    histology_patch_processed = to_gray(histology_patch_processed,
                                                        inv_color=self.inverseColorHistoPatchCheckbox.isChecked(),
                                                        contrast_enhance=self.contrastEnhanceHistoPatchCheckbox.isChecked(),
                                                        threshold=self.histoPatchSlider.value())
            else:
                self.inverseColorHistoPatchCheckbox.setEnabled(False)
                self.contrastEnhanceHistoPatchCheckbox.setEnabled(False)
                self.histoPatchSlider.setEnabled(False)
                histology_patch_processed = (histology_patch_processed*255).astype(np.uint8)
            # self.wsiPatchView.setPixmap(np2pixmap(histology_patch_processed).scaled(300, 300, Qt.KeepAspectRatio))
            self._update_display(histology_patch_processed, self.wsiPatchView)

            ## blending
            if histology_patch_processed.shape == fake_histo_image_processed.shape:
                if self.homo_matrix is not None:
                    fake_histo_image_processed_warped = warp_image(fake_histo_image_processed, self.homo_matrix)
                    fake_histo_image_processed_warped = transform.resize(fake_histo_image_processed_warped, self.original_fake_histo_image.shape[:2])
                    if fake_histo_image_processed_warped.dtype == np.float:
                        fake_histo_image_processed_warped = (fake_histo_image_processed_warped*256).astype(np.uint8)
                else:
                    fake_histo_image_processed_warped = fake_histo_image_processed

                self.blending_factor = self.blendingFactorSlider.value()/100
                self.label_blendingFactorSliderLabel.setText("Blending factor: {:.2f}".format(self.blending_factor))
                blending = (1-self.blending_factor) * histology_patch_processed + self.blending_factor * fake_histo_image_processed_warped
                blending = blending.astype(np.uint8)
                # self.blendingView.setPixmap(np2pixmap(blending.astype(np.uint8)).scaled(300, 300, Qt.KeepAspectRatio))
                self._update_display(blending.astype(np.uint8), self.blendingView)

                self.fake_histo_image_processed = fake_histo_image_processed
                self.histology_patch_processed = histology_patch_processed
            else:
                self.blendingView.setPixmap(QPixmap())

        else:
            self.fakeHistologyView.setPixmap(QPixmap())
            self.wsiPatchView.setPixmap(QPixmap())

    def toggle_startRegressionButton(self):
        if self.hm_algorithm == 1:
            # self.progress = QProgressDialog(self)
            # self.progress.setWindowTitle("Regression in progress")
            # self.progress.setLabelText("Estimating homography mtraix with ECC")
            # self.progress.setRange(0, 10)
            # self.progress.setValue(0)
            # # self.progress.exec()
            #
            # warp_mode = cv2.MOTION_HOMOGRAPHY
            # warp_matrix = np.eye(3, 3, dtype=np.float32)
            # criteria = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 1000, 1e-10)
            # try:
            #     self.progress.setValue(5)
            #     (cc, warp_matrix) = cv2.findTransformECC(self.histology_patch_processed, self.fake_histo_image_processed, warp_matrix, warp_mode, criteria)
            # except:
            #     msg = QMessageBox()
            #     msg.setIcon(QMessageBox.Critical)
            #     msg.setText("Error")
            #     msg.setInformativeText('Cannot find an optimal homography esitation, please try other algorithms')
            #     msg.setWindowTitle("Error")
            #     msg.exec_()
            #
            #     self.homo_matrix = warp_matrix
            # finally:
            #     self.progress.setValue(10)
            #     self.progress.close()
            #     del self.progress
            #     self.progress = None

            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Warning")
            msg.setInformativeText('Algorithm is not implemented yet.')
            msg.setWindowTitle("Warning")
            msg.exec_()
            return

        elif self.hm_algorithm == 0:
            self.epochs = int(self.numIterationLineEdit.text())
            self.lr = float(self.lrLineEdit.text())
            self.decay_epoch = int(self.decayLineEdit.text())
            self.comparing_windows_size = int(self.comparingWindowSizeLineEdit.text())

            self.startRegressionButton.setEnabled(False)
            thread = QThread()
            worker = PlotWorker(self)
            worker.moveToThread(thread)
            thread.started.connect(worker.run)
            worker.finished.connect(thread.quit)
            worker.finished.connect(worker.deleteLater)
            thread.finished.connect(thread.deleteLater)
            thread.finished.connect(
                lambda: self.startRegressionButton.setEnabled(True)
            )
            thread.start()

            self.progress = QProgressDialog(self)
            self.progress.setWindowTitle("Regression in progress")
            self.progress.setLabelText("Start regression to find the optimal registration")
            self.progress.setRange(0, 0)
            self.progress.setValue(0)
            self.progress.exec()
        else:
            raise ValueError("Unknown homo matrix esitmation algorithm: {}".format(self.hm_algorithm))

    def update_progressbar(self, epoch, loss):
        self.progress.setLabelText("Epoch:{} , loss: {:.3f}".format(epoch+1, loss))
        self.progress.setValue(epoch+1)
        if epoch + 1 >= self.epochs:
            self.progress.close()
            del self.progress
            self.progress = None


    def toggle_saveButton(self):
        if self.homo_matrix is None:
            QMessageBox.warning(self, "Empty arguments", "Arguments are empty\nPerhaps forgot to run regression?")
            return

        flim_image_file = os.path.basename(self.flim_image_file)
        flim_image_file = flim_image_file[:flim_image_file.rfind("--")]
        srrv = SaveRegressionResultsViewer(flim_image_file=flim_image_file,
                                           default_target_dir=os.path.dirname(self.flim_image_file))
        srrv.save_results_confirmed.connect(self.save_results_accepted)
        srrv.exec()

    def save_results_accepted(self, results_prefix, target_dir, is_save_reg_flim_image, is_save_reg_histo,
                              is_save_blending_image, is_save_loss_curve, flim_padding_color, histo_padding_color):
        # target_dir = "G:/reg_results/"
        if is_save_reg_flim_image:
            warped_flim = warp_image(self.original_fake_histo_image, self.homo_matrix)
            # warped_flim = self._correct_padding_colour(warped_flim, flim_padding_color)
            skimage.io.imsave("{}/{}--reg_flim_image.png".format(target_dir, results_prefix), warped_flim)

        if is_save_reg_histo:
            warped_patch = warp_image(self.original_histology_patch, self.homo_matrix, inv_warp=True)
            # warped_patch = self._correct_padding_colour(warped_patch, histo_padding_color)
            skimage.io.imsave("{}/{}--reg_histology_image.png".format(target_dir, results_prefix), warped_patch)

        if is_save_blending_image:
            self.blendingView.pixmap().save("{}/{}--blending.png".format(target_dir, results_prefix))

        if is_save_loss_curve:
            exporter = exporters.ImageExporter(self.lossPlotWidget.plotItem)
            exporter.export("{}/{}--loss.png".format(target_dir, results_prefix))

        pkl = dict()
        pkl["file_prefix"] = results_prefix
        pkl["homo_matrix"] = self.homo_matrix
        pkl["histo_patch_start_pos"] = np.asanyarray((self.histo_patch_start_pos.x(), self.histo_patch_start_pos.y()))
        pkl["histo_patch_end_pos"] = np.asanyarray((self.histo_patch_end_pos.x(), self.histo_patch_end_pos.y()))
        pkl["patch_dim"] = self.original_histology_patch.shape[:2]
        pkl["epochs"] = self.epochs
        pkl["lr"] = self.lr
        pkl["decay_epoch"] = self.decay_epoch
        pkl["comparing_windows_size"] = self.comparing_windows_size
        pkl["fake_histo_gray"] = self.grayFakeHistologyCheckbox.isChecked()
        pkl["fake_histo_inverse_colour"] = self.inverseColorFakeHistologyCheckbox.isChecked()
        pkl["fake_histo_enhance_contrast"] = self.contrastEnhanceFakeHistologyCheckbox.isChecked()
        pkl["fake_histo_threshold"] = self.fakeHistoSlider.value()
        pkl["histo_patch_gray"] = self.grayHistoPatchCheckbox.isChecked()
        pkl["histo_patch_inverse_colour"] = self.inverseColorHistoPatchCheckbox.isChecked()
        pkl["histo_patch_enhance_contrast"] = self.contrastEnhanceHistoPatchCheckbox.isChecked()
        pkl["histo_patch_threshold"] = self.histoPatchSlider.value()

        with open(f"{target_dir}/{results_prefix}.pkl", "wb") as p:
            pickle.dump(pkl, p)

    def _correct_padding_colour(self, image, padding_colour):
        for x in range(image.shape[0]):
            for y in range(image.shape[1]):
                if 127*0.95 <= np.mean(image[x, y]) < 127*1.05:
                    image[x, y] = padding_colour

        return image

    def flim_image_updated(self, fake_histo_image, flim_image_file: str):
        self.original_fake_histo_image = fake_histo_image
        self.flim_image_file = flim_image_file
        if fake_histo_image is not None:
            self.fakeHistologyView.setPixmap(np2pixmap(self.original_fake_histo_image).scaled(300, 300, Qt.KeepAspectRatio))
        self.update_gui()

    def histology_patch_updated(self, histology_patch, start_pos, end_pos):
        self.original_histology_patch = histology_patch
        self.histo_patch_start_pos = start_pos
        self.histo_patch_end_pos = end_pos
        if histology_patch is not None:
            self.wsiPatchView.setPixmap(np2pixmap(self.original_histology_patch).scaled(300, 300, Qt.KeepAspectRatio))
        self.update_gui()

class PlotWorker(QObject):
    finished = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent

    def run(self):
        # dimension = self.parent.histology_patch_processed.shape[0] \
        #             if self.parent.histology_patch_processed.shape[0] < self.parent.histology_patch_processed.shape[1] \
        #             else self.parent.histology_patch_processed.shape[1]
        dimension = self.parent.histology_patch_processed.shape[:2]
        ref_image = image2tensor((self.parent.histology_patch_processed).astype(np.uint8), size=dimension)
        moving_image = image2tensor((self.parent.fake_histo_image_processed).astype(np.uint8), size=dimension)


        warper = HomographyWarper(dimension[0], dimension[1])
        homo_param_reg = HomoParamRegression()

        optimizer_reg = torch.optim.Adam(homo_param_reg.parameters(), lr=self.parent.lr)
        scheduler = StepLR(optimizer_reg, step_size=self.parent.decay_epoch, gamma=0.1)

        if torch.cuda.device_count() >= 1:
            device = "cuda"
        else:
            device = "cpu"
        ref_image = ref_image.to(device)
        moving_image = moving_image.to(device)
        homo_param_reg.to(device)

        criterion = torch.nn.L1Loss(reduction='none')
        epochs = []
        losses = []

        for epoch in range(self.parent.epochs):
            homo_matrix = homo_param_reg()
            moving_image_transformed = warper(moving_image, homo_matrix)
            loss = criterion(moving_image_transformed, ref_image)
            loss = loss[..., self.parent.comparing_windows_size:dimension[0] - self.parent.comparing_windows_size,
                        self.parent.comparing_windows_size:dimension[1] - self.parent.comparing_windows_size]
            loss = torch.mean(loss)

            optimizer_reg.zero_grad()
            loss.backward()
            optimizer_reg.step()
            scheduler.step()

            epochs.append(epoch)
            losses.append(loss.item())

            blending = tensor2image(self.parent.blending_factor * moving_image_transformed + (1 - self.parent.blending_factor) * ref_image)
            # blending = transform.resize(blending, self.parent.histology_patch_processed.shape[:2])
            blending = (blending*255).astype(np.uint8)
            # self.parent.blendingView.setPixmap(np2pixmap(blending).scaled(300, 300, Qt.KeepAspectRatio))
            self.parent._update_display(blending, self.parent.blendingView)
            self.parent.blendingView.update()
            self.parent.data_line.setData(epochs, losses)
            self.parent.lossPlotWidget.update()
            self.parent.update_progressbar(epoch, loss.item())

            time.sleep(0.0001)

        # progress.setValue(self.parent.epochs)
        self.parent.homo_matrix = homo_matrix.squeeze(0).detach().cpu().numpy()
        self.finished.emit()


if __name__ == "__main__":
    fake_histo_image = "G:\\inverted\\processed\\stitched_tiles\\CR70A_3--9--stitching.png"
    # fake_histo_image = "G:/inverted/processed/gen_images/fake_histo/lifetime/fake_20210405_CR71A_4_FOV515_testing--2_3x3_Row_1_col_2--523-546nm.png"
    # fake_histo_image = "F:\\Backup\\UoE\\D_driver\\Dev\\Python\\registration\CycleGan\output_alpha\\flim\\x142_0_y16_0_w_5_alpha.png"
    # fake_histo_image = "C:\\Users\\Chiang\\Desktop\\test\\histo_patch_warped.png"
    fh_image = io.imread(fake_histo_image)
    # fh_image = np.dstack([fh_image, fh_image, fh_image])
    histology_patch = "G:/histology/images/CR70A_3_small_test1.png"
    # histology_patch = "C:\\Users\\Chiang\\Desktop\\test.png"
    h_image = io.imread(histology_patch)
    # h_image = np.dstack([h_image, h_image, h_image])
    app = QApplication(sys.argv)
    win = RegressionViewer(fake_histo_image=fh_image, histology_patch=h_image, flim_image_file=fake_histo_image,
                           histo_patch_start_pos=QPoint(100, 100), histo_patch_end_pos=QPoint(1000, 1000))
    win.show()
    sys.exit(app.exec_())