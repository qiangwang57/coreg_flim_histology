# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication, QMessageBox

from gui.FLIMImageViewer import FLIMImageViewer
from gui.HistologyImageViewer import HistologyImageViewer
from gui.RegressionViewer import RegressionViewer
from gui.StitchViewer import StitchViewer


class MainGUI(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("maingui")
        self.resize(502, 41)
        self.setSizeGripEnabled(False)
        self.setWindowTitle("Interactive Registration of FLIM Images and Histology Images")

        gridLayout = QtWidgets.QGridLayout()
        gridLayout.setObjectName("gridLayout")

        openFLIMButton = QtWidgets.QPushButton(self)
        openFLIMButton.setObjectName("openFLIMButton")
        openFLIMButton.setText("Open FLIM Image Viewer")
        openFLIMButton.clicked.connect(self.toggle_openFLIMButton)
        gridLayout.addWidget(openFLIMButton, 0, 1, 1, 1)

        openWSIButton = QtWidgets.QPushButton(self)
        openWSIButton.setObjectName("openWSIButton")
        openWSIButton.setText("Open Histology Image")
        openWSIButton.clicked.connect(self.toggle_openWSIButton)
        gridLayout.addWidget(openWSIButton, 0, 2, 1, 1)

        homographyRegressionButton = QtWidgets.QPushButton(self)
        homographyRegressionButton.setObjectName("homographyRegressionButton")
        homographyRegressionButton.setText("Open Homography Regression Viewer")
        homographyRegressionButton.clicked.connect(self.toggle_homographyRegressionButton)
        gridLayout.addWidget(homographyRegressionButton, 0, 3, 1, 1)

        stitchingViewerButton = QtWidgets.QPushButton(self)
        stitchingViewerButton.setObjectName("stitchingViewerButton")
        stitchingViewerButton.setText("Open Stitching Viewer")
        stitchingViewerButton.clicked.connect(self.toggle_stitchingViewerButton)
        gridLayout.addWidget(stitchingViewerButton, 0, 4, 1, 1)

        self.setLayout(gridLayout)

        self.fake_histo_image = None
        self.histo_patch = None
        self.start_pos = None
        self.end_pos = None
        self.homo_matrix = None
        self.use_histo_ref = True

    def toggle_openFLIMButton(self):
        if not hasattr(self, "flimImageViewer"):
            self.flimImageViewer = FLIMImageViewer()
            self.flimImageViewer.finish_generating.connect(self.fake_histo_generated)
        self.flimImageViewer.show()

    def toggle_openWSIButton(self):
        if self.fake_histo_image is None:
            msg = QMessageBox(self)
            msg.setWindowTitle("Empty Fake Histology Image")
            msg.setText("No Fake histology image being generated\nClicking \"Open FLIM\" for the generation.")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.exec()
            return

        if not hasattr(self, "histologyImageViewer"):
            self.histologyImageViewer = HistologyImageViewer(fake_histo_image=self.fake_histo_image)
            self.histologyImageViewer.patch_selected_signal.connect(self.histology_patch_selected)
        self.histologyImageViewer.show()

    def toggle_homographyRegressionButton(self):
        if self.fake_histo_image is None or self.histo_patch is None:
            msg = QMessageBox(self)
            msg.setWindowTitle("Empty Fake Histology Image or histology patch")
            msg.setText("No Fake histology image generated or histology patch selected.")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.exec()
            return

        if not hasattr(self, "regressionViewer"):
            self.regressionViewer = RegressionViewer(fake_histo_image=self.fake_histo_image,
                                                     histology_patch=self.histo_patch,
                                                     flim_image_file=self.flim_image_file,
                                                     histo_patch_start_pos=self.start_pos,
                                                     histo_patch_end_pos=self.end_pos)
            # self.regressionViewer.regression_finished.connect(self.regression_finished)
        self.regressionViewer.show()

    def toggle_stitchingViewerButton(self):
        if not hasattr(self, "stitchingViewer"):
            self.stitchingViewer = StitchViewer()

        self.stitchingViewer.show()

    def fake_histo_generated(self, fake_histo_image, image_file):
        self.fake_histo_image = fake_histo_image
        self.flim_image_file = image_file

        if hasattr(self, "regressionViewer"):
            self.regressionViewer.flim_image_updated(fake_histo_image, image_file)
            self.regressionViewer.repaint()

        if hasattr(self, "histologyImageViewer"):
            self.histologyImageViewer.fake_histo_updated(fake_histo_image)
            self.histologyImageViewer.repaint()

    def histology_patch_selected(self, histo_patch: np.ndarray, start_pos, end_pos):
        self.histo_patch = histo_patch
        self.start_pos = start_pos
        self.end_pos = end_pos

        if hasattr(self, "regressionViewer"):
            self.regressionViewer.histology_patch_updated(histo_patch, start_pos, end_pos)
            self.regressionViewer.repaint()

    def closeEvent(self, event: QtGui.QCloseEvent):
        if self.fake_histo_image is not None or self.histo_patch is not None or self.homo_matrix is not None:
            ret = QMessageBox.warning(self, "Close?", "Are you sure to close?", QMessageBox.Yes | QMessageBox.Cancel, QMessageBox.Cancel)
            if ret == QMessageBox.Cancel:
                event.ignore()
                return

        QtCore.QCoreApplication.instance().exit(0)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = MainGUI()
    win.show()
    sys.exit(app.exec_())
