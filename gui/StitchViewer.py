# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StitchViewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import glob
import os
import pickle
import sys
import time

import cv2
import h5py
import numpy as np
import torch
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, Qt, QObject, QThread
from PyQt5.QtGui import QIntValidator, QPixmap
from PyQt5.QtWidgets import QApplication, QWidget, QFileDialog, QMessageBox, QProgressBar, QProgressDialog
from kornia.geometry.transform import HomographyWarper
from matplotlib import cm
from skimage import io
from skimage.color import rgb2gray, rgba2rgb
from skimage.util import invert

from gui.utils import np2pixmap, image2tensor, tensor2image

FLIMImageTypes = {
    0: "Select FLIM image types",
    1: "Averaged Intensity",
    2: "Intensity",
    3: "Lifetime",
    4: "Intensity-weighted lifetime",
}

ColourMaps = {
    0: "Select a colour map",
    1: "jet",
    2: "hot",
    3: "gray",
    4: "copper",
}


class StitchViewer(QWidget):

    update_viewer_signal = pyqtSignal()

    def __init__(self, *args, **kwargs):
        super(StitchViewer, self).__init__()
        self.setObjectName("StitchViewer")
        self.resize(1514, 887)
        self.gridLayout_4 = QtWidgets.QGridLayout(self)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.selectDirWidget = QtWidgets.QWidget(self)
        self.selectDirWidget.setMinimumSize(QtCore.QSize(500, 0))
        self.selectDirWidget.setObjectName("selectDirWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.selectDirWidget)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.selectDirWidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.flimMatFileDirLineEdit = QtWidgets.QLineEdit(self.selectDirWidget)
        self.flimMatFileDirLineEdit.setMinimumSize(QtCore.QSize(240, 0))
        self.flimMatFileDirLineEdit.setObjectName("flimMatFileDirLineEdit")
        self.gridLayout.addWidget(self.flimMatFileDirLineEdit, 0, 1, 1, 1)
        self.flimMatFileDirButton = QtWidgets.QPushButton(self.selectDirWidget)
        self.flimMatFileDirButton.setObjectName("flimMatFileDirButton")
        self.gridLayout.addWidget(self.flimMatFileDirButton, 0, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.selectDirWidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.regResultDirLineEdit = QtWidgets.QLineEdit(self.selectDirWidget)
        self.regResultDirLineEdit.setMinimumSize(QtCore.QSize(240, 0))
        self.regResultDirLineEdit.setObjectName("regResultDirLineEdit")
        self.gridLayout.addWidget(self.regResultDirLineEdit, 1, 1, 1, 1)
        self.regResultDirButton = QtWidgets.QPushButton(self.selectDirWidget)
        self.regResultDirButton.setObjectName("regResultDirButton")
        self.gridLayout.addWidget(self.regResultDirButton, 1, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.selectDirWidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 2, 0, 1, 1)
        self.histologyImageLineEdit = QtWidgets.QLineEdit(self.selectDirWidget)
        self.histologyImageLineEdit.setMinimumSize(QtCore.QSize(240, 0))
        self.histologyImageLineEdit.setObjectName("histologyImageLineEdit")
        self.gridLayout.addWidget(self.histologyImageLineEdit, 2, 1, 1, 1)
        self.histologyImageButton = QtWidgets.QPushButton(self.selectDirWidget)
        self.histologyImageButton.setObjectName("histologyImageButton")
        self.gridLayout.addWidget(self.histologyImageButton, 2, 2, 1, 1)
        self.gridLayout_4.addWidget(self.selectDirWidget, 0, 0, 2, 1)
        self.regFLIMImageGroupBox = QtWidgets.QGroupBox(self)
        self.regFLIMImageGroupBox.setMinimumSize(QtCore.QSize(0, 0))
        self.regFLIMImageGroupBox.setCheckable(False)
        self.regFLIMImageGroupBox.setObjectName("regFLIMImageGroupBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.regFLIMImageGroupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.colourmapCombobox = QtWidgets.QComboBox(self.regFLIMImageGroupBox)
        self.colourmapCombobox.setObjectName("colourmapCombobox")
        self.gridLayout_2.addWidget(self.colourmapCombobox, 0, 3, 1, 5)
        self.label_4 = QtWidgets.QLabel(self.regFLIMImageGroupBox)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 1, 0, 1, 1)
        self.startBandWidthLineEdit = QtWidgets.QLineEdit(self.regFLIMImageGroupBox)
        self.startBandWidthLineEdit.setMinimumSize(QtCore.QSize(50, 0))
        self.startBandWidthLineEdit.setObjectName("startBandWidthLineEdit")
        self.startBandWidthLineEdit.setValidator(QIntValidator(0, 512, self))
        self.gridLayout_2.addWidget(self.startBandWidthLineEdit, 1, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.regFLIMImageGroupBox)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 1, 3, 1, 1)
        self.endBandWidthLineEdit = QtWidgets.QLineEdit(self.regFLIMImageGroupBox)
        self.endBandWidthLineEdit.setMinimumSize(QtCore.QSize(50, 0))
        self.endBandWidthLineEdit.setObjectName("endBandWidthLineEdit")
        self.endBandWidthLineEdit.setValidator(QIntValidator(0, 512, self))
        self.gridLayout_2.addWidget(self.endBandWidthLineEdit, 1, 4, 1, 1)
        self.imageTypeCombobox = QtWidgets.QComboBox(self.regFLIMImageGroupBox)
        self.imageTypeCombobox.setObjectName("imageTypeCombobox")
        self.gridLayout_2.addWidget(self.imageTypeCombobox, 0, 0, 1, 2)
        self.gridLayout_4.addWidget(self.regFLIMImageGroupBox, 0, 1, 2, 1)
        self.histologyImageGroupBox = QtWidgets.QGroupBox(self)
        self.histologyImageGroupBox.setCheckable(True)
        self.histologyImageGroupBox.setChecked(False)
        self.histologyImageGroupBox.setObjectName("histologyImageGroupBox")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.histologyImageGroupBox)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.grayHistologyImageCheckBox = QtWidgets.QCheckBox(self.histologyImageGroupBox)
        self.grayHistologyImageCheckBox.setObjectName("grayHistologyImageCheckBox")
        self.gridLayout_3.addWidget(self.grayHistologyImageCheckBox, 0, 0, 1, 2)
        self.inverseColourHistologyImageCheckbox = QtWidgets.QCheckBox(self.histologyImageGroupBox)
        self.inverseColourHistologyImageCheckbox.setObjectName("inverseColourHistologyImageCheckbox")
        self.gridLayout_3.addWidget(self.inverseColourHistologyImageCheckbox, 0, 2, 1, 1)
        self.blendingFactorLabel = QtWidgets.QLabel(self.histologyImageGroupBox)
        self.blendingFactorLabel.setObjectName("blendingFactorLabel")
        self.gridLayout_3.addWidget(self.blendingFactorLabel, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem, 0, 3, 1, 1)
        self.blendingFactorSlider = QtWidgets.QSlider(self.histologyImageGroupBox)
        self.blendingFactorSlider.setMinimum(0)
        self.blendingFactorSlider.setMaximum(10)
        self.blendingFactorSlider.setPageStep(3)
        self.blendingFactorSlider.setProperty("value", 4)
        self.blendingFactorSlider.setOrientation(QtCore.Qt.Horizontal)
        self.blendingFactorSlider.setObjectName("blendingFactorSlider")
        self.gridLayout_3.addWidget(self.blendingFactorSlider, 1, 1, 1, 3)
        self.gridLayout_4.addWidget(self.histologyImageGroupBox, 0, 2, 2, 1)
        self.startStitchButton = QtWidgets.QPushButton(self)
        self.startStitchButton.setObjectName("startStitchButton")
        self.gridLayout_4.addWidget(self.startStitchButton, 0, 3, 1, 1)
        self.saveButton = QtWidgets.QPushButton(self)
        self.saveButton.setObjectName("saveButton")
        self.gridLayout_4.addWidget(self.saveButton, 1, 3, 1, 1)
        self.stitchGraphicsView = QtWidgets.QGraphicsView(self)
        self.stitchGraphicsView.setMinimumSize(QtCore.QSize(800, 600))
        self.stitchGraphicsView.setObjectName("stitchGraphicsView")
        # self.stitchGraphicsViewItem = self.stitchGraphicsView.scene().addPixmap(QPixmap())
        stitchViewerScene = QtWidgets.QGraphicsScene()
        self.stitch_view_item = QtWidgets.QGraphicsPixmapItem()
        stitchViewerScene.addItem(self.stitch_view_item)
        self.stitchGraphicsView.setScene(stitchViewerScene)
        self.gridLayout_4.addWidget(self.stitchGraphicsView, 2, 0, 1, 4)

        self.retranslateUi()
        self.connect_slots()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.flim_mat_dir = None
        self.reg_result_dir = None
        self.histology_image_file = None
        self.histology_image = None
        self.histology_image_processed = None
        self.image_type = None
        self.colourmap = None
        self.bandwidth_start = 0
        self.bandwidth_end = 32
        self.show_histology_image = False
        self.gray_histology_image = False
        self.inverse_histology_image = False
        self.blending_factor = 0.6

        self.stitched_image = None

        # self._debug()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("StitchViewer", "StitchViewer"))
        self.label.setText(_translate("StitchViewer", "FLIM .mat file dir: "))
        self.flimMatFileDirButton.setText(_translate("StitchViewer", "Open"))
        self.label_2.setText(_translate("StitchViewer", "Registration result dir: "))
        self.regResultDirButton.setText(_translate("StitchViewer", "Open"))
        self.label_5.setText(_translate("StitchViewer", "Histology image: "))
        self.histologyImageButton.setText(_translate("StitchViewer", "Open"))
        self.regFLIMImageGroupBox.setTitle(_translate("StitchViewer", "Registered FLIM Image"))
        self.colourmapCombobox.setCurrentText(ColourMaps[0])
        for key, item in ColourMaps.items():
            self.colourmapCombobox.addItem(item)
        self.label_4.setText(_translate("StitchViewer", "Bandwidth to be display:"))
        self.startBandWidthLineEdit.setText(_translate("StitchViewer", "0"))
        self.label_6.setText(_translate("StitchViewer", "to"))
        self.endBandWidthLineEdit.setText(_translate("StitchViewer", "32"))
        self.imageTypeCombobox.setCurrentText(FLIMImageTypes[0])
        for key, item in FLIMImageTypes.items():
            self.imageTypeCombobox.addItem(item)
        self.histologyImageGroupBox.setTitle(_translate("StitchViewer", "Histology Image"))
        self.grayHistologyImageCheckBox.setText(_translate("StitchViewer", "Gray"))
        self.inverseColourHistologyImageCheckbox.setText(_translate("StitchViewer", "Inverse colour"))
        self.blendingFactorLabel.setText(_translate("StitchViewer", "Blending factor: 0.4"))
        self.startStitchButton.setText(_translate("StitchViewer", "Start Stitch"))
        self.saveButton.setText(_translate("StitchViewer", "Save Results"))

    def connect_slots(self):
        self.flimMatFileDirButton.clicked.connect(self.toggle_flimMatFileDirButton)
        self.regResultDirButton.clicked.connect(self.toggle_regResultDirButton)
        self.histologyImageButton.clicked.connect(self.toggle_histologyImageButton)

        self.startStitchButton.clicked.connect(self.toggle_startStitchButton)
        self.saveButton.clicked.connect(self.toggle_saveButton)

        self.imageTypeCombobox.currentIndexChanged.connect(self.currentIndexChanged_imageTypeCombobox)
        self.colourmapCombobox.currentIndexChanged.connect(self.currentIndexChanged_colourmapCombobox)

        self.startBandWidthLineEdit.editingFinished.connect(self.editFinished_startBandWidthLineEdit)
        self.endBandWidthLineEdit.editingFinished.connect(self.editFinished_endBandWidthLineEdit)

        self.histologyImageGroupBox.clicked.connect(self.checked_histologyImageGroupBox)
        self.grayHistologyImageCheckBox.clicked.connect(self.checked_grayHistologyImageCheckBox)
        self.inverseColourHistologyImageCheckbox.clicked.connect(self.checked_inverseColourHistologyImageCheckbox)
        self.blendingFactorSlider.valueChanged.connect(self.valueChanged_blendingFactorSlider)

        self.update_viewer_signal.connect(self.viewer_updated)

    def _debug(self):
        self.flim_mat_dir = "G:/inverted/processed/20210405_CR71A_4_FOV515_testing"
        self.flimMatFileDirLineEdit.setText(self.flim_mat_dir)

        self.histology_image_file = "G:/histology/images/partial/CR71A_4_testing.png"
        histology_image = io.imread(self.histology_image_file)
        if histology_image.shape[2] == 4:
            histology_image = rgba2rgb(histology_image)
            histology_image = (histology_image * 255).astype(np.uint8)
        self.histology_image = histology_image
        self.histologyImageLineEdit.setText(self.histology_image_file)

        self.reg_result_dir = "G:/reg_results/FOV515/testing"
        self.regResultDirLineEdit.setText(self.reg_result_dir)

    def _update_histology_display(self):
        if self.histology_image_file is None:
            return

        if self.show_histology_image:
            histo_image = np.copy(self.histology_image)
            if self.gray_histology_image:
                histo_image = rgb2gray(histo_image)

            if self.inverse_histology_image:
                histo_image = invert(histo_image)

            if histo_image.dtype == np.float:
                histo_image = (histo_image * 255).astype(np.uint8)

            self.histology_image_processed = histo_image
        else:
            self.histology_image_processed = None
        self.update_viewer_signal.emit()

    def viewer_updated(self):
        stitched_image = self.stitched_image if self.stitched_image is not None else 0
        histo_image = self.histology_image_processed if self.histology_image_processed is not None else 0

        blended_image = histo_image * self.blending_factor + stitched_image * (1 - self.blending_factor)

        if type(blended_image) == np.ndarray:
            blended_image = (blended_image).astype(np.uint8)
            self.stitch_view_item.setPixmap(np2pixmap(blended_image))
            self.stitchGraphicsView.fitInView(self.stitch_view_item, Qt.KeepAspectRatio)
            self.stitchGraphicsView.update()
        else:
            self.stitch_view_item.setPixmap(QPixmap())
            # self.stitchGraphicsView.fitInView(self.stitch_view_item, Qt.KeepAspectRatio)
            # self.stitchGraphicsView.update()

    def toggle_flimMatFileDirButton(self):
        dir = QFileDialog.getExistingDirectory(self, "Open Directory", ".",
                                               QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        if dir:
            self.flim_mat_dir = dir
            self.flimMatFileDirLineEdit.setText(dir)

    def toggle_regResultDirButton(self):
        dir = QFileDialog.getExistingDirectory(self, "Open Directory", ".",
                                               QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        if dir:
            self.reg_result_dir = dir
            self.regResultDirLineEdit.setText(dir)

    def toggle_histologyImageButton(self):
        image_file, _ = QFileDialog.getOpenFileName(self, "Open Histology Image",
                                                    filter="Images (*.png *.jpg *.tiff *.tif);; All Files (*.*)")
        if image_file == "":
            return

        self.histology_image_file = image_file
        histology_image = io.imread(self.histology_image_file)
        if histology_image.shape[2] == 4:
            histology_image = rgba2rgb(histology_image)
            histology_image = (histology_image*255).astype(np.uint8)
        self.histology_image = histology_image
        self.histologyImageLineEdit.setText(self.histology_image_file)

    def currentIndexChanged_imageTypeCombobox(self, index):
        if index != 0:
            self.image_type = FLIMImageTypes[index]

    def currentIndexChanged_colourmapCombobox(self, index):
        if index != 0:
            self.colourmap = ColourMaps[index]

    def editFinished_startBandWidthLineEdit(self):
        if self.startBandWidthLineEdit.text() != "":
            value = int(self.startBandWidthLineEdit.text())
            if value > self.bandwidth_end:
                QMessageBox.warning(self, "Invalid value of start bandwidth",
                                    "Start bandwidth must not be greater than end bandwidth",
                                    buttons=QMessageBox.Ok, defaultButton=QMessageBox.Ok)
                self.startBandWidthLineEdit.undo()
            else:
                self.bandwidth_start = value

    def editFinished_endBandWidthLineEdit(self):
        if self.endBandWidthLineEdit.text() != "":
            value = int(self.endBandWidthLineEdit.text())
            if value < self.bandwidth_start:
                QMessageBox.warning(self, "Invalid value of end bandwidth",
                                    "End bandwidth must not be smaller than start bandwidth",
                                    buttons=QMessageBox.Ok, defaultButton=QMessageBox.Ok)
                self.startBandWidthLineEdit.undo()
            else:
                self.bandwidth_end = value

    def checked_histologyImageGroupBox(self):
        self.show_histology_image = self.histologyImageGroupBox.isChecked()
        self._update_histology_display()
    
    def checked_grayHistologyImageCheckBox(self):
        self.gray_histology_image = self.grayHistologyImageCheckBox.isChecked()
        self._update_histology_display()
        
    def checked_inverseColourHistologyImageCheckbox(self):
        self.inverse_histology_image = self.inverseColourHistologyImageCheckbox.isChecked()
        self._update_histology_display()

    def valueChanged_blendingFactorSlider(self, value):
        self.blending_factor = value/10
        self.blendingFactorLabel.setText("Blending factor: {:.1f}".format(self.blending_factor))
        self._update_histology_display()

    def toggle_startStitchButton(self):
        if not self._check_status():
            return

        self._update_ui_status(False, False, False)

        thread = QThread()
        worker = StitchWorker(self)
        worker.moveToThread(thread)
        thread.started.connect(worker.run)
        worker.finished.connect(thread.quit)
        worker.finished.connect(worker.deleteLater)
        thread.finished.connect(thread.deleteLater)
        worker.stitch_updated.connect(self.viewer_updated)
        thread.finished.connect(
            lambda: self._update_ui_status(True, True, True)
        )
        thread.start()

    def _update_ui_status(self, select_dir_widget_status, reg_flim_groupbox_status, histo_image_groupbox_status):
        self.selectDirWidget.setEnabled(select_dir_widget_status)
        self.regFLIMImageGroupBox.setEnabled(reg_flim_groupbox_status)
        self.histologyImageGroupBox.setEnabled(histo_image_groupbox_status)

    def toggle_saveButton(self):
        pass

    def _check_status(self):
        if self.flimMatFileDirLineEdit.text() == "" or self.flim_mat_dir is None:
            QMessageBox.warning(self, "Empty FLIM .mat file dir",
                                "FLIM .mat file dir is empty\nSelect the dir before stitching",
                                buttons=QMessageBox.Ok, defaultButton=QMessageBox.Ok)
            return False
        else:
            self.flim_mat_dir = self.flimMatFileDirLineEdit.text()

        if self.regResultDirLineEdit.text() == "" or self.reg_result_dir is None:
            QMessageBox.warning(self, "Empty registration result dir",
                                "No registration result dir is specified, please select it first",
                                buttons=QMessageBox.Ok, defaultButton=QMessageBox.Ok)
            return False
        else:
            self.reg_result_dir = self.regResultDirLineEdit.text()

        if self.histologyImageLineEdit.text() == "" or self.histology_image_file is None:
            QMessageBox.warning(self, "Empty histology image",
                                "No histology image is selected, please select it first",
                                buttons=QMessageBox.Ok, defaultButton=QMessageBox.Ok)
            return False
        else:
            self.histology_image_file = self.histologyImageLineEdit.text()

        if self.imageTypeCombobox.currentIndex() == 0 or self.image_type is None:
            QMessageBox.warning(self, "Empty FLIM image type",
                                "Invalid FLIM image type, please select it first",
                                buttons=QMessageBox.Ok, defaultButton=QMessageBox.Ok)
            return False
        else:
            self.image_type = FLIMImageTypes[self.imageTypeCombobox.currentIndex()]

        if self.colourmapCombobox.currentIndex() == 0 or self.colourmap is None:
            QMessageBox.warning(self, "Empty colourmap",
                                "Invalid colour map, please select it first",
                                buttons=QMessageBox.Ok, defaultButton=QMessageBox.Ok)
            return False
        else:
            self.colourmap = ColourMaps[self.colourmapCombobox.currentIndex()]

        if self.histologyImageGroupBox.isChecked():
            self.show_histology_image = self.histologyImageGroupBox.isChecked()
            self.gray_histology_image = self.grayHistologyImageCheckBox.isChecked()
            self.inverse_histology_image = self.inverseColourHistologyImageCheckbox.isChecked()
            self.blending_factor = self.blendingFactorSlider.value()/10

        return True

class StitchWorker(QObject):
    stitch_updated = pyqtSignal()
    finished = pyqtSignal()

    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.flim_mat_dir = self.parent.flim_mat_dir
        self.reg_result_dir = self.parent.reg_result_dir
        self.flim_image_type = self.parent.image_type
        self.colourmap = self.parent.colourmap
        self.bandwidth_start = self.parent.bandwidth_start
        self.bandwidth_end = self.parent.bandwidth_end
        self.dimensions = self.parent.histology_image.shape

        if self.colourmap == "gray":
            self.stitch_result = np.zeros(self.dimensions[:2])
        else:
            self.stitch_result = np.zeros(self.dimensions)

        self.progress = QProgressDialog(parent=self.parent)
        self.progress.setAutoClose(True)
        self.progress.setWindowTitle("Stitching in progress")

    def run(self):
        flim_mat_data_dirs = [f.path for f in os.scandir(self.flim_mat_dir) if f.is_dir()]
        avg_it_mat_file = "intensity.mat"
        it_mat_file = "lifetime_alpha_cube.mat"
        lt_mat_file = "lifetime_cube.mat"

        self.progress.setMaximum(len(flim_mat_data_dirs))
        self.progress.setValue(0)
        for index, flim_mat_data_dir in enumerate(flim_mat_data_dirs):
            self.progress.setLabelText("Process " + flim_mat_data_dir)

            data_prefix = flim_mat_data_dir.split("\\")[-1].split("/")[-1]

            if self.flim_image_type == FLIMImageTypes[1]:
                mat_file = h5py.File(f"{self.flim_mat_dir}/{data_prefix}/{avg_it_mat_file}", "r")
                image = np.array(mat_file.get("intensity_image"))
                image = self._array2image(image)
            elif self.flim_image_type == FLIMImageTypes[2]:
                mat_file = h5py.File(f"{self.flim_mat_dir}/{data_prefix}/{it_mat_file}", "r")
                fs_intensity = np.array(mat_file.get("AlphaDataAll"))
                image = np.mean(fs_intensity[self.bandwidth_start:self.bandwidth_end], axis=2)
                image = self._array2image(image)
            elif self.flim_image_type == FLIMImageTypes[3]:
                mat_file = h5py.File(f"{self.flim_mat_dir}/{data_prefix}/{lt_mat_file}", "r")
                fs_lifetime = np.array(mat_file.get("tauLeastSquaresReshaped"))
                image = np.mean(fs_lifetime[self.bandwidth_start:self.bandwidth_end], axis=2)
                image = self._array2image(image, [1, 5])
            else:
                mat_file = h5py.File(f"{self.flim_mat_dir}/{it_mat_file}", "r")
                fs_intensity = np.array(mat_file.get("AlphaDataAll"))
                fs_intensity = np.mean(fs_intensity[self.bandwidth_start:self.bandwidth_end], axis=2)
                mat_file = h5py.File(f"{self.flim_mat_dir}/{lt_mat_file}", "r")
                fs_lifetime = np.array(mat_file.get("tauLeastSquaresReshaped"))
                fs_lifetime = np.mean(fs_lifetime[self.bandwidth_start:self.bandwidth_end], axis=2)
                image = np.mean(fs_lifetime[self.bandwidth_start:self.bandwidth_end], axis=2)
                image = self._array2image(image, [1, 5], fs_intensity/np.max(fs_intensity))

            ## need to transform image first
            image = np.flipud(image)
            image = np.rot90(np.rot90(np.rot90(image)))

            reg_result_file = glob.glob(f"{self.reg_result_dir}/*{data_prefix}.pkl")[0]
            with open(reg_result_file, 'rb') as p:
                reg_info = pickle.load(p)

            start_pos = (reg_info['histo_patch_start_pos']).astype(int)
            target_dim = reg_info['patch_dim']
            homo_matrix = reg_info['homo_matrix']

            image_warped = self._warp_image(image, homo_matrix, target_dim)

            if start_pos[1] + target_dim >= self.stitch_result.shape[0]:
                target_h = self.stitch_result.shape[0] - start_pos[1]
            else:
                target_h = target_dim

            if start_pos[0] + target_dim >= self.stitch_result.shape[1]:
                target_w = self.stitch_result.shape[1] - start_pos[0]
            else:
                target_w = target_dim

            if target_w != target_h:
                if self.flim_image_type == FLIMImageTypes[3]:  ## gray image
                    temp = np.zeros((target_dim, target_dim))
                else:
                    temp = np.zeros((target_dim, target_dim, 3))
                temp[:target_h, :target_w] = self.stitch_result[start_pos[1]: start_pos[1] + target_h,
                                             start_pos[0]: start_pos[0] + target_w]
                merged_image = self._merge_image(temp, image_warped)
                self.stitch_result[start_pos[1]: start_pos[1] + target_h,
                start_pos[0]: start_pos[0] + target_w] = merged_image[:target_h, :target_w]
            else:
                self.stitch_result[start_pos[1]: start_pos[1] + target_h, start_pos[0]: start_pos[0] + target_w] = \
                    self._merge_image(
                        self.stitch_result[start_pos[1]: start_pos[1] + target_h, start_pos[0]: start_pos[0] + target_w],
                        image_warped[:target_h, :target_w])

            self.parent.stitched_image = self.stitch_result
            self.stitch_updated.emit()

            time.sleep(0.01)
            self.progress.setValue(index+1)

        self.finished.emit()

    def _warp_image(self, image, homo_matrix, target_dim, inverse=False):
        image_tensor = image2tensor(image)
        homo_matrix_tensor = torch.Tensor(homo_matrix)
        homo_matrix_tensor = torch.unsqueeze(homo_matrix_tensor, dim=0)
        if inverse:
            homo_matrix_tensor = torch.inverse(homo_matrix_tensor)

        warper = HomographyWarper(target_dim, target_dim)
        image_warped = warper(image_tensor, homo_matrix_tensor)
        return tensor2image(image_warped) * np.max(image)  ## back to the original range

    def _merge_image(self, a, b, avg_on_union=True):
        a_mask = (a > 0).astype(a.dtype)
        b_mask = (b > 0).astype(b.dtype)
        a_b_mask_exl = a_mask * b_mask
        a_mask_exl_b = a_mask - a_b_mask_exl
        b_mask_exl_a = b_mask - a_b_mask_exl

        if avg_on_union:
            result = a * a_mask_exl_b + b * b_mask_exl_a + (a * a_b_mask_exl + b * a_b_mask_exl) / 2
        else:
            result = a * a_mask_exl_b + b * b_mask

        return result

    def _array2image(self, array, scale=None, weight=None):
        if self.colourmap == "gray":
            cmap = cm.gray
        elif self.colourmap == "copper":
            cmap = cm.copper
        elif self.colourmap == "hot":
            cmap = cm.hot
        else:
            cmap = cm.jet

        if scale is None:
            scale = [np.min(array), np.max(array)]

        array_copy = np.copy(array)
        array_copy[array_copy < scale[0]] = 0
        array_copy[array_copy > scale[1]] = 0

        if cmap == cm.gray:
            if weight is not None:
                array_copy *= weight

            return array_copy

        else:
            array_copy /= scale[1]
            array_copy_colour = cmap(array_copy)
            array_copy_colour = array_copy_colour[:, :, :3]

            if weight is not None:
                array_copy_colour = array_copy_colour * np.dstack((weight, weight, weight))
            return (array_copy_colour * 255).astype(np.uint8)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = StitchViewer()
    win.show()
    sys.exit(app.exec_())